model = "waveletflow"

# Sets the number of affine coupling layers for each DWT level.
stepsPerResolution = [8, 8, 8, 8, 16, 16, 16, 16, 16, 16, 16]

# Number of multi-scale levels in Glow. This is not used in our code as multi-scales are handled using wavelets.
stepsPerResolution_L = [3] * 8

# Total number of DWT levels. This value should be log_2(nx), where nx is the pixel size of the input image.
nLevels = 8

# The lowest DWT level to decompose the image to.
# If baseLevel = 1, the lowest DWT training level will be a 2x2 pixel map.
# If baseLevel = 4, the lowest DWT training level will be a 16x16 pixel map.
# Base level cannot be greater than nLevels - 1.
baseLevel = 1
partialLevel = -1  # Legacy variable not removed from the code.

# Parameters for convolutional networks in the affine coupling layer.
kernel = 3
hiddenChannels = 256
n_res_blocks = 3

# Glow parameters.
perm = "invconv"  # Permutation type: either 'invconv' or 'shuffle'.
coupling = "checker"  # Coupling type: either 'checker' or 'rqs' (Rational Quadratic Spline) 
network = ['ConvNet'] * 10 #network type: 'ConvNet', 'ResNet' or 'Unet'
actNormScale = 1.0  # Scale parameter for activation normalization in Glow.
LU = True  # Whether LU decomposition is applied to the 1x1 convolution layers.
conditional = True  # If True, high-frequency DWT components are conditioned on the low-frequency components. Should always be True for this setup.

# Parameters for class-conditional training. Not relevent for this work.
y_classes = None  # Specifies the number of classes (set to None if not using class conditioning).
y_learn_top = False  # If True, learns a class-conditional prior at the top-most level.
y_condition = False  # If True, includes class labels as input to the model.
y_weight = None  # Weighting factor for the class-conditional loss (not used if y_condition is False).

# Prior configurations.
priorType = 'CC'  # Specifies the type of prior: 'CC' for component-correlated priors or 'C' for independent component priors (i.e. no cross correlations).
gauss_priors = []  # DWT levels using a Gaussian (white noise) prior. For a white noise prior, include all levels in this list.
unnormalize_prior = [True]*10  # If True, scales the correlated prior to match the data's amplitude. 
normalize_prior = [False]*10

# Dataset configurations.
dataset = 'My_lmdb'  # Replace 'My_lmdb' with your dataset. Currently configured for Agora simulations only.
channels_to_get = ['kappa', 'cib']  # Components to use for training. Options include 'kappa', 'ksz', 'tsz', 'cib', and 'radio'.
noise_dict = {
    # Defines components to which white noise is added, specifying their noise levels and ell range.
    # The first value in the list is the standard deviation (std) of the white noise added.
    # The second value is the ell value above which the noise is applied. If None, noise is applied across all scales.
    # Example: 'kappa' is noised with std=0.01 across all scales, while 'cib' remains unchanged.
    'kappa': [10.0, 21600]
}
double_precision = [None, True, True, True, True, True, False, False, False, False]
imShape = [2, 256, 256]  # Shape of the training image. imShape[0] must match len(channels_to_get).
data_shape = (5, 256, 256)  # Shape of the dataset. Currently includes all five components in the dataset.
dataset_path = '/sdf/data/kipac/u/mati/agora_256x256_hybrid_prior/training_and_validation_data/agora_training_maps_256x256_cutouts'  # Path to the training dataset.
val_dataset_path = '/sdf/data/kipac/u/mati/agora_256x256_hybrid_prior/training_and_validation_data/agora_validation_maps_256x256_cutouts'  # Path to the validation dataset.
sample_batch_size = 128  # Batch size for sampling. Training batch sizes for each level are configured in agora.py.
normalize = [False] * 10  # If True, data is normalized after the DWT transformation during training. Requires precomputed normalization constants at std_path. Currently untested with True.
norm_type = ['min_max']*10 #Norm type: either 'std' (i.e. mean zero and std 1) or 'min_max' (i.e. the data is compress to the range -1 to 1)

# Power spectra and normalization settings.
std_path = 'norm_stds/256x256_final_mean_stats_all_levels_kappa_cib_kappa_noise_10.0.json'  # Path to the normalization constants.
ps_path = 'ps/256x256_kappa_noise_10.0_yuuki_kap_cib/dwtlevel'  # Path to the folder containing power spectra for all DWT components at each level.

# Output paths.
saveDir = '/sdf/group/kipac/users/mati/CC_prior_best_model_256_kap_noise_10.0/'  # Directory to save the trained model (update as needed).
plotSaveDir = 'plots_CC_prior_best_model_256_kap_noise_10.0/'  # Directory to save plots generated by Sample_test.py.

